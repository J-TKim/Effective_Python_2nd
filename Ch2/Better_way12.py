# 스트라이드를 사용하면 리스트에서 인덱스가 짝수인 그룹과 홀수인 그룹을 쉽게 나눌 수 있다
x = ['빨강', '주황', '노랑', '초록', '파랑', '자주']
odds = x[::2]
evens = x[1::2]
print(odds)
print(evens)

# 일반적으로 바이트 문자열을 뒤집기 위해 -1을 증가값으로 사용한다
x = b'mongoose'
y = x[::-1]
print(y)

# 유니코드 문자열에서도 이런 기법이 잘 작동한다
x = '寿司' # 스시(일본어 한자)
y = x[::-1]
print(y)

# 하지만 유니코드 데이터를 UTF-8로 인코딩한 문자열에서는 작동하지 않는다
# w = '寿司'
# x = w.encode('utf-8').strip()
# y = x[::-1]
# z = y.decode('utf-8')
# UnicodeDecodeError: 'utf-8' codec can't decode byte 0xb8 in position 0: invalid start byte

# -1말고 다른 음수 증가값을 이용하는 경우
x = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
print(x[::2]) # ['a', 'c', 'e', 'g']
print(x[::-2]) # ['h', 'f', 'd', 'b']

# 다른 증감식의 결과
print(x[2::2]) # ['c', 'e', 'g']
print(x[-2::-2]) # ['g', 'e', 'c', 'a']
print(x[-2:2:-2]) # ['g', 'e']
print(x[2:2:-2]) # []
# 식을 읽고 이해하기가 너무 어렵다는 단점이 있다

"""
이러한 문제를 방지하기 위해선 시작값이나 끝값을 증가가값과 함께 사용하지 말자,
증가값을 사용할 경우에는 양수값으로 만들고 시작과 끝 인덱스를 생략하자
시작이나 끝 인덱스와 함께 증가값을 사용해야한다면, 스트라이딩 한 결과를 변수에 대입한 다음 슬라이싱하자
"""
y = x[::2] # ['a', 'c', 'e', 'g']
z = y[1:-1] # ['c', 'e']